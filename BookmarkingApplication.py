#!/usr/bin/env python

"""Django Bookmarking application"""

from django.db import models
from django.core.validators import URLValidator

class userObject(model.Model):
	"""
	A category for users.
	"""

# (NOTE: link to contrib.auth for this)
	"""Installation contrib.auth
Authentication support is bundled as a Django contrib module in django.contrib.auth. By default, the required configuration is already included in the settings.py generated by django-admin startproject, these consist of two items listed in your INSTALLED_APPS setting:

'django.contrib.auth' contains the core of the authentication framework, and its default models.
'django.contrib.contenttypes' is the Django content type system, which allows permissions to be associated with models you create.
and two items in your MIDDLEWARE_CLASSES setting:

SessionMiddleware manages sessions across requests.
AuthenticationMiddleware associates users with requests using sessions.
With these settings in place, running the command manage.py migrate creates the necessary database tables for auth related models and permissions for any models defined in your installed apps."""

# Internal ID: Char field of length 25, can be null and blank.
	internal_Id = model.CharField(max_length = 25, blank = True, null = True)

# verified: Boolean field, not null and cannot be blank. Default is False.
	verified = model(bool(null = False, default = False))

# approval_date: Datetime field, can be null and blank.
	approval_date = model.approval_date(null = True, blank = True)


class listObject(model.Model):
	"""
	A category for creating lists.
	"""
# Name: Char field of length 50, not null and cannot be blank.
	name = model.CharField(max_length = 50)

# Date Created: DateTimeField, updated only once at object creation time.
	date_created = class DateTimeField([auto_now = False, auto_now_add = False, **options])

# Date Modified: DatetimeField, updated every time the object is updated.
	date_modified = class DateTimeField([auto_now = False, auto_now_add = False, **options])

# Links: Many to Many field to Link object(s)
	class Article(models.Model):
    Links = models.ManyToManyField(Links)

class linkObject(model.Model)


# Name: Char field of length 50, not null and cannot be blank.
	name = model.CharField(max_length = 50)

# Link: URLField, not null and cannot be blank.
	# in model
	field = models.TextField(validators=[URLValidator()])

# Date Created: DateTimeField, updated only once at object creation time.
	TextField_modified = class DateTimeField([auto_now = False, auto_now_add = False, **options])

# Date Modified: DatetimeField, updated every time the object is updated.
	date_modified = class DateTimeField([auto_now = False, auto_now_add = False, **options])

# Tags: Textfield, can be null and blank.


"""Additional"""
# Please also create views for:

# 1. A login page

# 2. A list of all Lists in the system

# 2.1 Have a form that allows someone to create a new List object.

# 3. After clicking on a List from page 2, this page will have all the Links
# on that List.

# 3.1 Have a form to add a new Link to the List.

# 3.2 Have a way to delete Links from a List.


